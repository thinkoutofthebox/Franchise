@mixin retina {
  @media only screen and (-webkit-min-device-pixel-ratio: 2), 
    only screen and (min--moz-device-pixel-ratio: 2),
    only screen and (-o-min-device-pixel-ratio: 2/1),
    only screen and (min-device-pixel-ratio: 2),
    only screen and (min-resolution: 192dpi),
    only screen and (min-resolution: 2dppx)
    {
      @content;
    }
}

@mixin mobile {
  @media screen and (min-width: 320px) {
    @content;
  }
}
@mixin mobile-only {
  @media screen and (min-width: 320px) and (max-width: 619px) {
    @content;
  }
}

@mixin mobile-wide {
  @media screen and (min-width: 620px) {
    @content;
  }
}
@mixin mobile-wide-only {
  @media screen and (min-width: 620px) and (max-width: 767px) {
    @content;
  }
}

@mixin tablet {
  @media screen and (min-width: 768px) {
    @content;
  }
}
@mixin tablet-only {
  @media screen and (min-width: 768px) and (max-width: 1023px) {
    @content;
  }
}

@mixin tablet-wide {
  @media screen and (min-width: 1024px) {
    @content;
  }
}
@mixin tablet-wide-only {
  @media screen and (min-width: 1024px) and (max-width: 1199px) {
    @content;
  }
}

@mixin desktop {
  @media screen and (min-width: 1024px) {
    @content;
  }
}

@mixin desktop-wide {
  @media screen and (min-width: 1200px) {
    @content;
  }
}

@mixin desktop-large {
  @media screen and (min-width: 1440px) {
    @content;
  }
}

@mixin background-gradient($startcolor, $endcolor, $orientation) {
    background: $startcolor;
    @if $orientation == vertical{ /* vertical */
      background: -moz-linear-gradient(top,  $startcolor 0%, $endcolor 100%);
      background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
      background: -webkit-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: -o-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: -ms-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
      background: linear-gradient(to bottom,  $startcolor 0%,$endcolor 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=0 );
    }@else if $orientation == horizontal{ /* horizontal */
      background: -moz-linear-gradient(left,  $startcolor 0%, $endcolor 100%);
      background: -webkit-gradient(linear, left top, right top, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
      background: -webkit-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: -o-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: -ms-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
      background: linear-gradient(to right,  $startcolor 0%,$endcolor 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=1 );
    }@else{ /* radial */
      background: -moz-radial-gradient(center, ellipse cover,  $startcolor 0%, $endcolor 100%);
      background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
      background: -webkit-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: -o-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: -ms-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
      background: radial-gradient(ellipse at center,  $startcolor 0%,$endcolor 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=1 );
    }
}

@mixin gradient-dual-direction($start-color, $end-color, $deg) {
  background: -moz-linear-gradient(top, $start-color 0%, $end-color 100%);
  background: -webkit-linear-gradient(top, $start-color 0%, $end-color 100%);
  background: linear-gradient(to bottom, $start-color 0%, $end-color 100%);
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );
}

/* BACKGROUND SIZE */
/* USAGE Example: @include background-size(100%, 100%); */
@mixin background-size($width, $height) {
    -moz-background-size:$width $height;
	-webkit-background-size:$width $height;
    background-size:$width $height;
}

@mixin anim($items, $duration, $type){
	-webkit-transition:$items $duration $type;
	-moz-transition:$items $duration $type;
	transition:$items $duration $type;
}

@mixin box-shadow($top, $left, $blur, $color, $inset:false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

/* BOX SIZING */
/* usage example: @include box-sizing(border-box); */
@mixin box-sizing($type) {
  -webkit-box-sizing:$type;
  -moz-box-sizing:$type;
  box-sizing:$type;
}

@mixin full-width{width:100%; float:left;}

/* POSITION */
/* USAGE EXAMPLE : @include position(absolute, 10px, null, 10px, 10px); */
@mixin position($type,$left,$right,$top,$bottom) {
  position: $type;
  left: $left;
  right: $right;
  top: $top;
  bottom: $bottom;
}

/* OPACITY */
/* USAGE EXAMPLE : @include opacity(0.2); */
@mixin opacity($opacity) {
  opacity: $opacity;
  filter: alpha(opacity=($opacity * 100));
}

/* Arrows / Triangles */
@mixin arrow($direction, $arrowColor, $arrowSize){
    width: 0;
    height: 0;
    @if $direction == up{
        border-left: $arrowSize dashed transparent;
        border-right: $arrowSize dashed transparent;
        border-bottom: $arrowSize dashed $arrowColor;
    } @else if($direction == down){
        border-left: $arrowSize dashed transparent;
        border-right: $arrowSize dashed transparent;
        border-top: $arrowSize dashed $arrowColor;
    } @else if($direction == right){
        border-top: $arrowSize dashed transparent;
        border-bottom: $arrowSize dashed transparent;
        border-left: $arrowSize dashed $arrowColor;
    } @else if($direction == left){
        border-top: $arrowSize dashed transparent;
        border-bottom: $arrowSize dashed transparent; 
        border-right:$arrowSize dashed $arrowColor; 
    }
}

/* Circle */
@mixin circle(){
    /*width: $radius / 2;
    height: $radius / 2;*/
    border-radius: 50% 50%;
    -moz-border-radius: 50% 50%;
    -webkit-border-radius: 50% 50%;
    -o-border-radius: 50% 50%;
    -ms-border-radius: 50% 50%;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

@mixin text-truncate(){
  text-overflow:ellipsis; 
  overflow:hidden; 
  white-space:nowrap;
}

/* Not Text */
@mixin no-text(){
	overflow:hidden;
	text-indent:-99999999px;
}

/* Auto */
@mixin center{
	margin:0 auto;
}

@mixin center-pos{
	position:absolute;
	left:50%;
	top:50%;
	@include transform (translate(-50%, -50%))
}

@mixin vert-center-pos(){
	position:absolute;
	top:50%;
	@include transform (translate(0, -50%))
}

@mixin hor-center-pos(){
	position:absolute;
	left:50%;
	@include transform (translate(-50%, 0))
}

@mixin text-center{
	text-align:center;
}

/* generic transform */
@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
  transform: $transforms;
}

/* rotate */
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}

/* rotate */
@mixin translateRotate {
  @include transform(rotate(-90deg) translate(0px, -50%));
  position:absolute;
}
 
/* scale */
@mixin scale($scale) {
	 @include transform(scale($scale));
}

/* translate */
@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}

/* skew */
@mixin skew ($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}

/* transform origin */
@mixin transform-origin ($origin) {
  moz-transform-origin: $origin;
	-o-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
  transform-origin: $origin;
}


